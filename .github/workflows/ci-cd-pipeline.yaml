# .github/workflows/cicd-pipeline.yml
name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: myapp
  DOCKER_REGISTRY: docker.io
  CLUSTER_NAME: my-cluster
  NAMESPACE: production

jobs:
  # Stage 1: Linting and Code Quality
  linting:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install linting tools
      run: |
        pip install flake8 pylint black isort
        npm install -g eslint

    - name: Run Python linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        pylint **/*.py || true
        black --check . || true
        isort --check-only . || true

    - name: Run JavaScript linting (if applicable)
      run: |
        if [ -f "package.json" ]; then
          npm install
          eslint . || true
        fi

  # Stage 2: SAST (Static Application Security Testing)
  sast:
    runs-on: self-hosted
    needs: linting
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit (Python SAST)
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true

    - name: Run Semgrep
      run: |
        pip install semgrep
        semgrep --config=auto . --json --output=semgrep-report.json || true

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Upload SAST reports
      uses: actions/upload-artifact@v3
      with:
        name: sast-reports
        path: |
          bandit-report.json
          semgrep-report.json

  # Stage 3: SCA (Software Composition Analysis)
  sca:
    runs-on: self-hosted
    needs: linting
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Safety check (Python dependencies)
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Run Snyk (if Node.js project)
      run: |
        if [ -f "package.json" ]; then
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --json > snyk-report.json || true
        fi

    - name: Upload SCA reports
      uses: actions/upload-artifact@v3
      with:
        name: sca-reports
        path: |
          safety-report.json
          snyk-report.json

  # Stage 4: Unit Tests
  unit-tests:
    runs-on: self-hosted
    needs: [linting, sast]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run unit tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  # Stage 5: Build Docker Image
  build-docker:
    runs-on: self-hosted
    needs: [unit-tests, sca]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Stage 6: Container Security Scanning
  container-security:
    runs-on: self-hosted
    needs: build-docker
    steps:
    - name: Run Trivy vulnerability scanner
      run: |
        trivy image --format json --output trivy-report.json ${{ needs.build-docker.outputs.image-tag }}

    - name: Upload Trivy report
      uses: actions/upload-artifact@v3
      with:
        name: trivy-report
        path: trivy-report.json

  # Stage 7: Deploy to Cluster
  deploy:
    runs-on: self-hosted
    needs: [build-docker, container-security]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

    - name: Deploy to Kubernetes
      run: |
        # Update deployment with new image
        kubectl set image deployment/myapp-deployment myapp=${{ needs.build-docker.outputs.image-tag }} -n ${{ env.NAMESPACE }}
        
        # Wait for rollout to complete
        kubectl rollout status deployment/myapp-deployment -n ${{ env.NAMESPACE }}
        
        # Verify deployment
        kubectl get pods -n ${{ env.NAMESPACE }}

    - name: Run smoke tests
      run: |
        # Get service URL
        SERVICE_URL=$(kubectl get service myapp-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Basic health check
        curl -f http://$SERVICE_URL/health || exit 1

  # Stage 8: DAST (Dynamic Application Security Testing)
  dast:
    runs-on: self-hosted
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Get application URL
      run: |
        APP_URL=$(kubectl get service myapp-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "APP_URL=http://$APP_URL" >> $GITHUB_ENV

    - name: Run OWASP ZAP Baseline Scan
      run: |
        docker run -v $(pwd):/zap/wrk/:rw \
          -t owasp/zap2docker-stable zap-baseline.py \
          -t ${{ env.APP_URL }} \
          -J zap-baseline-report.json \
          -r zap-baseline-report.html || true

    - name: Upload DAST reports
      uses: actions/upload-artifact@v3
      with:
        name: dast-reports
        path: |
          zap-baseline-report.json
          zap-baseline-report.html

  # Stage 9: Final Security Testing
  security-testing:
    runs-on: self-hosted
    needs: [deploy, dast]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Run Nmap scan
      run: |
        APP_URL=$(kubectl get service myapp-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        nmap -sV -oX nmap-report.xml $APP_URL || true

    - name: Run SSL/TLS checks
      run: |
        APP_URL=$(kubectl get service myapp-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if curl -k https://$APP_URL > /dev/null 2>&1; then
          echo "HTTPS enabled, running SSL tests"
          docker run --rm -ti nablac0d3/sslyze --regular $APP_URL > ssl-report.txt || true
        fi

    - name: Upload security test reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          nmap-report.xml
          ssl-report.txt

  # Notification and Reporting
  notify:
    runs-on: self-hosted
    needs: [security-testing]
    if: always()
    steps:
    - name: Send notification
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ CI/CD Pipeline completed successfully!"
        else
          echo "❌ CI/CD Pipeline failed!"
        fi
        
        # Add Slack/Teams/Email notification here if needed
